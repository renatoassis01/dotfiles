export TERM=xterm-256color
export EDITOR="vim"

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Path to your oh-my-zsh installation.
export ZSH="/home/renato/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"
plugins=(git
         docker
         docker-compose
         node
         nvm
         command-not-found
         zsh-interactive-cd
         zsh-history-substring-search
         history-search-multi-word
         zsh-syntax-highlighting
         zsh-autosuggestions)

# load oh-my-zsh
source $ZSH/oh-my-zsh.sh
export ZSH="/home/renato/.oh-my-zsh"

# Plugins
zinit light zdharma/fast-syntax-highlighting

# TMUX
zinit ice as"program" id-as"tmux" atpull"%atclone" make \
  atclone"ln -fs $HOME/.zinit/plugins/tmux/tmux /usr/local/bin/tmux; ./autogen.sh; ./configure"
zinit light tmux/tmux

# TMUX plugin manager
zinit ice lucid wait"!0a" as"null" id-as"tpm" \
   atclone" \
    mkdir -p $HOME/.tmux/plugins; \
    ln -s $HOME/.zinit/plugins/tpm $HOME/.tmux/plugins/tpm; \
    setup_my_tmux_plugin tpm;"
zinit light tmux-plugins/tpm

# lazygit
zinit ice lucid wait"0" as"program" from"gh-r" mv"lazygit* -> lazygit""
zinit light jesseduffield/lazygit

# jq
zinit ice lucid wait"0" as"program" id-as"jq" from"gh-r" mv"jq-* -> jq"
zinit light stedolan/jq

# yq
zinit ice lucid wait"0" as"program" id-as"yq" from"gh-r" mv"yq_* -> yq" 
zinit light mikefarah/yq

# fzf
zinit ice lucid wait'0b' from"gh-r" as"program"
zinit light junegunn/fzf

# BurntSushi/ripgrep
zinit ice as"command" from"gh-r" mv"ripgrep* -> rg" pick"rg/rg"
zinit light BurntSushi/ripgrep

# sharkdp/fd
zinit ice as"command" from"gh-r" mv"fd* -> fd" pick"fd/fd"
zinit light sharkdp/fd

# sharkdp/bat
zinit ice as"command" from"gh-r" mv"bat* -> bat" pick"bat/bat"
zinit light sharkdp/bat

# dandavision/delta
zinit ice as"command" from"gh-r" mv"delta* -> delta" pick"delta/delta"
zinit light dandavison/delta

# ogham/exa, replacement for ls
zinit ice wait"2" lucid from"gh-r" as"program" mv"exa* -> exa"
zinit light ogham/exa

# neovim
zinit wait'0' lucid \
  id-as"nvim" from'gh-r' ver'nightly' as'program' pick'nvim*/bin/nvim' \
  atclone'echo "" > ._zinit/is_release' \
  atpull'%atclone' \
  run-atpull \
  atload"alias v=nvim" \
  light-mode for @neovim/neovim

#LS_COLORS
zinit ice atclone"dircolors -b LS_COLORS > clrs.zsh" \
    atpull'%atclone' pick"clrs.zsh" nocompile'!' \
    atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”'
zinit light trapd00r/LS_COLORS

#zstyle ':completion:*' completer _expand _complete _ignored _approximate
#zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
#zstyle ':completion:*' menu select=2
#zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
#zstyle ':completion:*:descriptions' format '-- %d --'
#zstyle ':completion:*:processes' command 'ps -au$USER'
#zstyle ':completion:complete:*:options' sort false
#zstyle ':fzf-tab:complete:_zlua:*' query-string input
#zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm,cmd -w -w"
#zstyle ':fzf-tab:complete:kill:argument-rest' fzf-flags --preview=$extract'ps --pid=$in[(w)1] -o cmd --no-headers -w -w' --preview-window=down:3:wrap
#zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
#zstyle ':fzf-tab:*' switch-group ',' '.'
#zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
#zstyle ':fzf-tab:*' popup-pad 0 0
#zstyle ":completion:*:git-checkout:*" sort false


# HISTORY
[ -z "$HISTFILE" ] && HISTFILE="$HOME/.zhistory"
HISTSIZE=290000
SAVEHIST=$HISTSIZE

zstyle ":history-search-multi-word" page-size "8"                      # Number of entries to show (default is $LINES/3)
zstyle ":history-search-multi-word" highlight-color "fg=yellow,bold"   # Color in which to highlight matched, searched text (default bg=17 on 256-color terminals)
zstyle ":plugin:history-search-multi-word" synhl "yes"                 # Whether to perform syntax highlighting (default true)
zstyle ":plugin:history-search-multi-word" active "underline"          # Effect on active history entry. Try: standout, bold, bg=blue (default underline)
zstyle ":plugin:history-search-multi-word" check-paths "yes"           # Whether to check paths for existence and mark with magenta (default true)
zstyle ":plugin:history-search-multi-word" clear-on-cancel "no"        # Whether pressing Ctrl-C or ESC should clear entered query

# Golang
export GO111MODULE=auto
export GOPATH=$HOME/workspace/go

# If you come from bash you might have to change your $PATH.
export PATH=$HOME/.local/bin:$HOME/bin:/usr/local/bin:/usr/local/go/bin:$GOPATH/bin:$PATH

# Aliases
if [[ -r ~/.aliasrc ]]; then
    source ~/.aliasrc
fi

# Custom local config
if [[ -r ~/.zshlocal ]]; then
    source ~/.zshlocal
fi

# nvm
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#kitty autocomplete
kitty + complete setup zsh | source /dev/stdin
